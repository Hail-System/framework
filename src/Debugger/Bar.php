<?php
/**
 * This file is part of the Tracy (https://tracy.nette.org)
 * Copyright (c) 2004 David Grudl (https://davidgrudl.com) Modified by FlyingHail <flyinghail@msn.com>
 */

namespace Hail\Debugger;

use Hail\Http\Factory;
use Hail\Util\Strings;
use Psr\Http\Message\ResponseInterface;

/**
 * Debug Bar.
 */
class Bar
{
    /** @var Bar\PanelInterface[] */
    private $panels = [];

    /** @var bool  initialized by dispatchAssets() */
    private $useSession = false;

    /** @var string|NULL  generated by renderLoader() */
    private $contentId;

    /**
     * Add custom panel.
     *
     * @param  Bar\PanelInterface $panel
     * @param  string             $id
     *
     * @return static
     */
    public function addPanel(Bar\PanelInterface $panel, string $id = null): self
    {
        if ($id === null) {
            $c = 0;
            do {
                $id = \get_class($panel) . ($c++ ? "-$c" : '');
            } while (isset($this->panels[$id]));
        }
        $this->panels[$id] = $panel;

        return $this;
    }


    /**
     * Returns panel with given id
     *
     * @param  string $id
     *
     * @return Bar\PanelInterface|NULL
     */
    public function getPanel(string $id): ?Bar\PanelInterface
    {
        return $this->panels[$id] ?? null;
    }

    /**
     * Renders loading <script>
     *
     * @return void
     */
    public function renderLoader(): void
    {
        if (!$this->useSession) {
            throw new \LogicException('Start session before Tracy is enabled.');
        }
        $contentId = $this->contentId = $this->contentId ?: \substr(\md5(\uniqid('', true)), 0, 10);
        $nonce = Helpers::getNonce();
        $async = true;
        require __DIR__ . '/assets/Bar/loader.phtml';
    }

    /**
     * Renders debug bar.
     *
     * @return void
     */
    public function render(): void
    {
        $useSession = $this->useSession && \session_status() === PHP_SESSION_ACTIVE;
        $redirectQueue = &$_SESSION['_tracy']['redirect'];

        foreach (['bar', 'redirect', 'bluescreen'] as $key) {
            $queue = &$_SESSION['_tracy'][$key];
            $queue = \array_slice((array) $queue, -10, null, true);
            $queue = \array_filter($queue, function ($item) {
                return isset($item['time']) && $item['time'] > \time() - 60;
            });
        }

        $rows = [];

        if (Helpers::isAjax()) {
			if ($useSession) {
				$rows[] = (object) ['type' => 'ajax', 'panels' => $this->renderPanels('-ajax')];
				$contentId = $_SERVER['HTTP_X_TRACY_AJAX'] . '-ajax';
				$_SESSION['_tracy']['bar'][$contentId] = ['content' => self::renderHtmlRows($rows), 'dumps' => Dumper::fetchLiveData(), 'time' => \time()];
			}
        } elseif (Helpers::isRedirect()) { // redirect
            if ($useSession) {
				Dumper::fetchLiveData();
				Dumper::$livePrefix = \count($redirectQueue) . 'p';
				$redirectQueue[] = [
					'panels' => $this->renderPanels('-r' . \count($redirectQueue)),
					'dumps' => Dumper::fetchLiveData(),
					'time' => \time(),
				];
			}
		} elseif (Helpers::isHtmlMode()) {
            $rows[] = (object) ['type' => 'main', 'panels' => $this->renderPanels()];
            $dumps = Dumper::fetchLiveData();
            foreach (\array_reverse((array) $redirectQueue) as $info) {
                $rows[] = (object) ['type' => 'redirect', 'panels' => $info['panels']];
                $dumps += $info['dumps'];
            }
            $redirectQueue = null;
            $content = self::renderHtmlRows($rows);

            if ($this->contentId) {
                $_SESSION['_tracy']['bar'][$this->contentId] = ['content' => $content, 'dumps' => $dumps, 'time' => time()];
			} else {
				$contentId = \substr(\md5(\uniqid('', true)), 0, 10);
				$nonce = Helpers::getNonce();
				$async = false;
				require __DIR__ . '/assets/Bar/loader.phtml';
			}
        }
    }

	private static function renderHtmlRows(array $rows): string
	{
        \ob_start();
        require __DIR__ . '/assets/Bar/panels.phtml';
        require __DIR__ . '/assets/Bar/bar.phtml';

        return Strings::fixEncoding(\ob_get_clean());
    }

    private function renderPanels($suffix = null): array
    {
        \set_error_handler(static function ($severity, $message, $file, $line) {
            if (\error_reporting() & $severity) {
                throw new \ErrorException($message, 0, $severity, $file, $line);
            }
        });

        $obLevel = \ob_get_level();
        $panels = [];

        foreach ($this->panels as $id => $panel) {
            $idHtml = \preg_replace('#[^a-z0-9]+#i', '-', $id) . $suffix;
            try {
                $tab = $panel->getTab();
                $panelHtml = $tab ? $panel->getPanel() : null;
            } catch (\Throwable $e) {
                while (\ob_get_level() > $obLevel) { // restore ob-level if broken
                    \ob_end_clean();
                }
                $idHtml = "error-$idHtml";
                $tab = "Error in $id";
                $panelHtml = "<h1>Error: $id</h1><div class='tracy-inner'>" . \nl2br(Helpers::escapeHtml($e)) . '</div>';
                unset($e);
            }
            $panels[] = (object) ['id' => $idHtml, 'tab' => $tab, 'panel' => $panelHtml];
        }

        \restore_error_handler();

        return $panels;
    }


    /**
     * Renders debug bar assets.
     *
     * @return ResponseInterface|null
     */
    public function dispatchAssets(): ?ResponseInterface
    {
        $asset = $_GET['_tracy_bar'] ?? null;
        if ($asset === 'js') {
            \ob_start();
            $this->renderAssets();
            $body = \ob_get_clean();

            return Factory::response(200, $body, [
                'Content-Type' => 'text/javascript',
                'Cache-Control' => 'max-age=864000',
            ]);
        }

        $this->useSession = \session_status() === PHP_SESSION_ACTIVE;

        $headers = [];
        if ($this->useSession && Helpers::isAjax()) {
            $headers['X-Tracy-Ajax'] = '1'; // session must be already locked
        }

        if ($this->useSession && $asset && \preg_match('#^content(-ajax)?\.(\w+)$#', $asset, $m)) {
            $session = &$_SESSION['_tracy']['bar'][$m[2] . $m[1]];
            $headers['Content-Type'] = 'text/javascript';
            $headers['Cache-Control'] = 'max-age=60';

            \ob_start();
            if (!$m[1]) {
                $this->renderAssets();
            }

            if ($session) {
                $method = $m[1] ? 'loadAjax' : 'init';
                echo "Tracy.Debug.$method(", \json_encode($session['content']), ', ', \json_encode($session['dumps']), ');';
                $session = null;
            }

            $session = &$_SESSION['_tracy']['bluescreen'][$m[2]];
            if ($session) {
                echo 'Tracy.BlueScreen.loadAjax(', \json_encode($session['content']), ', ', \json_encode($session['dumps']), ');';
                $session = null;
            }

            $body = \ob_get_clean();

            return Factory::response(200, $body, $headers);
        }

        return null;
    }

    private function renderAssets(): void
    {
        $css = \array_map('\\file_get_contents', [
            __DIR__ . '/assets/Bar/bar.css',
            __DIR__ . '/assets/Toggle/toggle.css',
            __DIR__ . '/assets/Dumper/dumper.css',
            __DIR__ . '/assets/BlueScreen/bluescreen.css',
        ]);
        $css = \json_encode(\preg_replace('#\s+#u', ' ', \implode('', $css)));
        echo "(function(){var el = document.createElement('style'); el.className='tracy-debug'; el.textContent=$css; document.head.appendChild(el);})();\n";

        \array_map('\\readfile', [
            __DIR__ . '/assets/Bar/bar.js',
            __DIR__ . '/assets/Toggle/toggle.js',
            __DIR__ . '/assets/Dumper/dumper.js',
            __DIR__ . '/assets/BlueScreen/bluescreen.js',
        ]);
    }
}
